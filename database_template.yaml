# To reach the database for administration, you will need two consoles. If the first, run
# export PGMASTER=$(kubectl get pods -o jsonpath={.items..metadata.name} -n <namespace> -l application=spilo,cluster-name=<team_id>-<pod_name_suffix>,spilo-role=master)
# kubectl port-forward $PGMASTER 6432:5432 -n <namespace>
# In the second console, run
# export PGPASSWORD=$(kubectl get secret -n <namespace> postgres.<team_id>-<pod_name_suffix>.credentials.postgresql.acid.zalan.do -o 'jsonpath={.data.password}' | base64 -d)
# psql -U postgres -p 6432 -h localhost
# From the docs:
# "The operator automatically generates a password for each manifest role and places it in the secret named `{username}.{team}-{clustername}.credentials.postgresql.acid.zalan.do` in the same namespace as the cluster. This way, the application running in the K8s cluster and connecting to Postgres can obtain the password right from the secret, without ever sharing it outside of the cluster."
# To reach your database from within your namespace, use:
# ${parameters.team_id}-${parameters.pod_name_suffix}.svc.cluster.local
# To reach your database within another namespace, use:
# ${parameters.team_id}-${parameters.pod_name_suffix}.${parameters.namespace}.svc.cluster.local

apiVersion: acid.zalan.do/v1
kind: postgresql
metadata:
  name: '${parameters.team_id}-${parameters.pod_name_suffix}'
  namespace: '${parameters.namespace}'
  labels:
    team: '${parameters.team_id}'
spec:
  teamId: '${parameters.team_id}'
  volume:
    storageClass: ebs-sc
    size: '${parameters.volume_size}Gi'
  numberOfInstances: '${#toInt(parameters.instances)}'
  enableMasterLoadBalancer: false
  enableReplicaLoadBalancer: false
  postgresql:
    version: "${parameters.postgres_version}"
  resources:
    requests:
      cpu: '${parameters.cpus_request}m'
      memory: '${parameters.memory_request}Mi'
    limits:
      cpu: '${parameters.cpus_limit}m'
      memory: '${parameters.memory_limit}Mi'